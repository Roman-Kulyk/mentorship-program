Decorators are a powerful and flexible way to modify or extend the behavior of functions or methods,
without changing their actual code. A decorator is essentially a function that takes another function
as an argument and returns a new function with enhanced functionality.

Decorators are often used in scenarios such as logging, authentication and memorization, allowing us to
add additional functionality to existing functions or methods in a clean, reusable way.

Types of Decorators
1. Function Decorators:
The most common type of decorator, which takes a function as input and returns a new function.

2. Method Decorators:
Used to decorate methods within a class. They often handle special cases,
such as the self argument for instance methods.

3. Class Decorators
Class decorators are used to modify or enhance the behavior of a class.
Like function decorators, class decorators are applied to the class definition.
They work by taking the class as an argument and returning a modified version of the class.
