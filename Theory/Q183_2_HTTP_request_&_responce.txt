Q_183_Part_2 
HTTP(HTTP basics, HTTP vd HTTPS, HTTP requests types, responce codes)

HTTP request methods

HTTP defines a set of request methods to indicate the desired action to be
performed for a given resource. Although they can also be nouns, these request
 methods are sometimes referred to as HTTP verbs. Each of them implements a
different semantic, but some common features are shared by a group of them: 
e.g. a request method can be safe, idempotent, or cacheable.

1. The GET method requests a representation of the specified resource. 
Requests using GET should only retrieve data.

2. The HEAD method asks for a response identical to a GET request, 
but without the response body.

3. The POST method submits an entity to the specified resource, often causing a
change in state or side effects on the server.

4. The PUT method replaces all current representations of the target resource
with the request payload.

5. The DELETE method deletes the specified resource.

6. The CONNECT method establishes a tunnel to the server identified by the target
resource.

7. The OPTIONS method describes the communication options for the target resource.
 
8. The TRACE method performs a message loop-back test along the path to the
target resource.

9. The PATCH method applies partial modifications to a resource.

HTTP response status codes

1. Informational responses (100 – 199)

100 Continue
This interim response indicates that the client should continue the request 
or ignore the response if the request is already finished.

102 Processing (WebDAV)
This code indicates that the server has received and is processing the
request, but no response is available yet.

103 Early Hints
This status code is primarily intended to be used with the Link header,
letting the user agent start preloading resources while the server prepares
a response or preconnect to an origin from which the page will need resources.

2. Successful responses (200 – 299)

200 OK
The request succeeded. The result meaning of "success" depends on the HTTP 
method:
 GET: The resource has been fetched and transmitted in the message body.
 HEAD: The representation headers are included in the response without any
 message body.
 PUT or POST: The resource describing the result of the action is transmitted
 in the message body.
 TRACE: The message body contains the request message as received by the
 server.

201 Created
The request succeeded, and a new resource was created as a result. This is
typically the response sent after POST requests, or some PUT requests.

202 Accepted
The request has been received but not yet acted upon. It is noncommittal,
since there is no way in HTTP to later send an asynchronous response
indicating the outcome of the request. It is intended for cases where another
process or server handles the request, or for batch processing.

203 Non-Authoritative Information
This response code means the returned metadata is not exactly the same as is
available from the origin server, but is collected from a local or a
third-party copy. This is mostly used for mirrors or backups of another
resource. Except for that specific case, the 200 OK response is preferred to
this status.

204 No Content
There is no content to send for this request, but the headers may be useful.
The user agent may update its cached headers for this resource with the new
ones.

205 Reset Content
Tells the user agent to reset the document which sent this request.

206 Partial Content
This response code is used when the Range header is sent from the client
to request only part of a resource.

207 Multi-Status (WebDAV)
Conveys information about multiple resources, for situations where multiple
status codes might be appropriate.

208 Already Reported (WebDAV)
Used inside a <dav:propstat> response element to avoid repeatedly enumerating
the internal members of multiple bindings to the same collection.

226 IM Used (HTTP Delta encoding)
The server has fulfilled a GET request for the resource, and the response is
a representation of the result of one or more instance-manipulations applied
to the current instance.

3. Redirection messages (300 – 399)

302 Found
This response code means that the URI of requested resource has been changed
temporarily. Further changes in the URI might be made in the future.
Therefore, this same URI should be used by the client in future requests.

303 See Other
The server sent this response to direct the client to get the requested
resource at another URI with a GET request.

304 Not Modified
This is used for caching purposes. It tells the client that the response has
not been modified, so the client can continue to use the same cached version
of the response.

305 Use Proxy Deprecated
Defined in a previous version of the HTTP specification to indicate that a
requested response must be accessed by a proxy. It has been deprecated due to
security concerns regarding in-band configuration of a proxy.

307 Temporary Redirect
The server sends this response to direct the client to get the requested
resource at another URI with the same method that was used in the prior
request. This has the same semantics as the 302 Found HTTP response code,
with the exception that the user agent must not change the HTTP method used:
if a POST was used in the first request, a POST must be used in the second
request.

308 Permanent Redirect
This means that the resource is now permanently located at another URI,
specified by the Location: HTTP Response header. This has the same semantics
as the 301 Moved Permanently HTTP response code, with the exception that the
user agent must not change the HTTP method used: if a POST was used in the
first request, a POST must be used in the second request.

4. Client error responses (400 – 499)

400 Bad Request
The server cannot or will not process the request due to something that is
perceived to be a client error (e.g., malformed request syntax, invalid
request message framing, or deceptive request routing).

401 Unauthorized
Although the HTTP standard specifies "unauthorized", semantically this
response means "unauthenticated". That is, the client must authenticate
itself to get the requested response.

402 Payment Required Experimental
This response code is reserved for future use. The initial aim for creating
this code was using it for digital payment systems, however this status code
is used very rarely and no standard convention exists.

403 Forbidden
The client does not have access rights to the content; that is, it is
unauthorized, so the server is refusing to give the requested resource.
Unlike 401 Unauthorized, the client's identity is known to the server.

404 Not Found
The server cannot find the requested resource. In the browser, this means the
URL is not recognized. In an API, this can also mean that the endpoint is
valid but the resource itself does not exist. Servers may also send this
response instead of 403 Forbidden to hide the existence of a resource from an
unauthorized client. This response code is probably the most well known due
to its frequent occurrence on the web.

405 Method Not Allowed
The request method is known by the server but is not supported by the target
resource. For example, an API may not allow calling DELETE to remove a
resource.

406 Not Acceptable
This response is sent when the web server, after performing server-driven
content negotiation, doesn't find any content that conforms to the criteria
given by the user agent.

40...

5. Server error responses (500 – 599)
500 Internal Server Error
The server has encountered a situation it does not know how to handle.

501 Not Implemented
The request method is not supported by the server and cannot be handled. The
only methods that servers are required to support (and therefore that must
not return this code) are GET and HEAD.

502 Bad Gateway
This error response means that the server, while working as a gateway to get
a response needed to handle the request, got an invalid response.

503 Service Unavailable
The server is not ready to handle the request. Common causes are a server
that is down for maintenance or that is overloaded. 

504 Gateway Timeout
This error response is given when the server is acting as a gateway and
cannot get a response in time.

505 HTTP Version Not Supported
The HTTP version used in the request is not supported by the server.

506 Variant Also Negotiates
The server has an internal configuration error: the chosen variant resource
is configured to engage in transparent content negotiation itself, and is
therefore not a proper end point in the negotiation process.

507 Insufficient Storage (WebDAV)
The method could not be performed on the resource because the server is
unable to store the representation needed to successfully complete the
request.

508 Loop Detected (WebDAV)
The server detected an infinite loop while processing the request.

510 Not Extended
Further extensions to the request are required for the server to fulfill it.

     
511 Network Authentication Required
Indicates that the client needs to authenticate to gain network access.






